/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "./common.js"
  
export declare namespace IHederaTokenService {
      
    export type ExpiryStruct = {second: BigNumberish, autoRenewAccount: AddressLike, autoRenewPeriod: BigNumberish}

    export type ExpiryStructOutput = [second: bigint, autoRenewAccount: string, autoRenewPeriod: bigint] & {second: bigint, autoRenewAccount: string, autoRenewPeriod: bigint }
  

    export type KeyValueStruct = {inheritAccountKey: boolean, contractId: AddressLike, ed25519: BytesLike, ECDSA_secp256k1: BytesLike, delegatableContractId: AddressLike}

    export type KeyValueStructOutput = [inheritAccountKey: boolean, contractId: string, ed25519: string, ECDSA_secp256k1: string, delegatableContractId: string] & {inheritAccountKey: boolean, contractId: string, ed25519: string, ECDSA_secp256k1: string, delegatableContractId: string }
  

    export type TokenKeyStruct = {keyType: BigNumberish, key: IHederaTokenService.KeyValueStruct}

    export type TokenKeyStructOutput = [keyType: bigint, key: IHederaTokenService.KeyValueStructOutput] & {keyType: bigint, key: IHederaTokenService.KeyValueStructOutput }
  

    export type HederaTokenStruct = {name: string, symbol: string, treasury: AddressLike, memo: string, tokenSupplyType: boolean, maxSupply: BigNumberish, freezeDefault: boolean, tokenKeys: IHederaTokenService.TokenKeyStruct[], expiry: IHederaTokenService.ExpiryStruct}

    export type HederaTokenStructOutput = [name: string, symbol: string, treasury: string, memo: string, tokenSupplyType: boolean, maxSupply: bigint, freezeDefault: boolean, tokenKeys: IHederaTokenService.TokenKeyStructOutput[], expiry: IHederaTokenService.ExpiryStructOutput] & {name: string, symbol: string, treasury: string, memo: string, tokenSupplyType: boolean, maxSupply: bigint, freezeDefault: boolean, tokenKeys: IHederaTokenService.TokenKeyStructOutput[], expiry: IHederaTokenService.ExpiryStructOutput }
  
    }

  export interface HederaTokenServiceInterface extends Interface {
    getFunction(nameOrSignature: "getTokenExpiryInfo" | "grantTokenKyc" | "isKyc" | "pauseToken" | "revokeTokenKyc" | "unpauseToken" | "updateTokenExpiryInfo" | "updateTokenInfo"): FunctionFragment;

    

    encodeFunctionData(functionFragment: 'getTokenExpiryInfo', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'grantTokenKyc', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'isKyc', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'pauseToken', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'revokeTokenKyc', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'unpauseToken', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'updateTokenExpiryInfo', values: [AddressLike, IHederaTokenService.ExpiryStruct]): string;
encodeFunctionData(functionFragment: 'updateTokenInfo', values: [AddressLike, IHederaTokenService.HederaTokenStruct]): string;

    decodeFunctionResult(functionFragment: 'getTokenExpiryInfo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'grantTokenKyc', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isKyc', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'pauseToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'revokeTokenKyc', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'unpauseToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updateTokenExpiryInfo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updateTokenInfo', data: BytesLike): Result;
  }

  

  export interface HederaTokenService extends BaseContract {
    
    connect(runner?: ContractRunner | null): HederaTokenService;
    waitForDeployment(): Promise<this>;

    interface: HederaTokenServiceInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    getTokenExpiryInfo: TypedContractMethod<
      [token: AddressLike, ],
      [[bigint, IHederaTokenService.ExpiryStructOutput] & {responseCode: bigint, expiryInfo: IHederaTokenService.ExpiryStructOutput }],
      'nonpayable'
    >
    

    
    grantTokenKyc: TypedContractMethod<
      [token: AddressLike, account: AddressLike, ],
      [bigint],
      'nonpayable'
    >
    

    
    isKyc: TypedContractMethod<
      [token: AddressLike, account: AddressLike, ],
      [[bigint, boolean] & {responseCode: bigint, kycGranted: boolean }],
      'nonpayable'
    >
    

    
    pauseToken: TypedContractMethod<
      [token: AddressLike, ],
      [bigint],
      'nonpayable'
    >
    

    
    revokeTokenKyc: TypedContractMethod<
      [token: AddressLike, account: AddressLike, ],
      [bigint],
      'nonpayable'
    >
    

    
    unpauseToken: TypedContractMethod<
      [token: AddressLike, ],
      [bigint],
      'nonpayable'
    >
    

    
    updateTokenExpiryInfo: TypedContractMethod<
      [token: AddressLike, expiryInfo: IHederaTokenService.ExpiryStruct, ],
      [bigint],
      'nonpayable'
    >
    

    
    updateTokenInfo: TypedContractMethod<
      [token: AddressLike, tokenInfo: IHederaTokenService.HederaTokenStruct, ],
      [bigint],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'getTokenExpiryInfo'): TypedContractMethod<
      [token: AddressLike, ],
      [[bigint, IHederaTokenService.ExpiryStructOutput] & {responseCode: bigint, expiryInfo: IHederaTokenService.ExpiryStructOutput }],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'grantTokenKyc'): TypedContractMethod<
      [token: AddressLike, account: AddressLike, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'isKyc'): TypedContractMethod<
      [token: AddressLike, account: AddressLike, ],
      [[bigint, boolean] & {responseCode: bigint, kycGranted: boolean }],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'pauseToken'): TypedContractMethod<
      [token: AddressLike, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'revokeTokenKyc'): TypedContractMethod<
      [token: AddressLike, account: AddressLike, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'unpauseToken'): TypedContractMethod<
      [token: AddressLike, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'updateTokenExpiryInfo'): TypedContractMethod<
      [token: AddressLike, expiryInfo: IHederaTokenService.ExpiryStruct, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'updateTokenInfo'): TypedContractMethod<
      [token: AddressLike, tokenInfo: IHederaTokenService.HederaTokenStruct, ],
      [bigint],
      'nonpayable'
    >;

    

    filters: {
      
    };
  }
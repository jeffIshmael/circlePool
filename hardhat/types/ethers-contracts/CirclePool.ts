/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  
export declare namespace CirclePool {
      
    export type PaymentStruct = {id: BigNumberish, circleId: BigNumberish, receiver: AddressLike, amount: BigNumberish, timestamp: BigNumberish}

    export type PaymentStructOutput = [id: bigint, circleId: bigint, receiver: string, amount: bigint, timestamp: bigint] & {id: bigint, circleId: bigint, receiver: string, amount: bigint, timestamp: bigint }
  
    }

  export interface CirclePoolInterface extends Interface {
    getFunction(nameOrSignature: "addMember" | "addMemberToPayoutOrder" | "aiAgent" | "checkAllMembersContributed" | "checkPayDate" | "circles" | "deleteCircle" | "deleteMember" | "depositCash" | "emergencyWithdraw" | "getBalance" | "getCircle" | "getCirclePayoutOrder" | "getCircles" | "getEachMemberBalance" | "getPayments" | "owner" | "payments" | "processLoan" | "registerCircle" | "repayLoan" | "setAiAgent" | "setPayoutOrder" | "totalCircles" | "totalPayments"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "CashDeposited" | "CircleDeleted" | "CircleRegistered" | "FundsDisbursed" | "LoanPaid" | "LoanProcessed" | "MemberAdded" | "MemberAddedToPayoutOrder" | "MemberRemoved" | "PayDateChecked" | "PayOutProcessed" | "PayoutDone" | "PayoutOrderSet" | "RefundIssued" | "RefundUpdated" | "TransferDone" | "WithdrawalRecorded" | "aiAgentSet" | "amountWithdrawn"): EventFragment;

    encodeFunctionData(functionFragment: 'addMember', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'addMemberToPayoutOrder', values: [BigNumberish, AddressLike[]]): string;
encodeFunctionData(functionFragment: 'aiAgent', values?: undefined): string;
encodeFunctionData(functionFragment: 'checkAllMembersContributed', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'checkPayDate', values: [BigNumberish[]]): string;
encodeFunctionData(functionFragment: 'circles', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'deleteCircle', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'deleteMember', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'depositCash', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'emergencyWithdraw', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'getBalance', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'getCircle', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getCirclePayoutOrder', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getCircles', values?: undefined): string;
encodeFunctionData(functionFragment: 'getEachMemberBalance', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getPayments', values?: undefined): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'payments', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'processLoan', values: [AddressLike, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'registerCircle', values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'repayLoan', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'setAiAgent', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'setPayoutOrder', values: [BigNumberish, AddressLike[]]): string;
encodeFunctionData(functionFragment: 'totalCircles', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalPayments', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'addMember', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'addMemberToPayoutOrder', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'aiAgent', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'checkAllMembersContributed', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'checkPayDate', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'circles', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'deleteCircle', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'deleteMember', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'depositCash', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'emergencyWithdraw', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getBalance', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getCircle', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getCirclePayoutOrder', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getCircles', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getEachMemberBalance', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getPayments', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'payments', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'processLoan', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'registerCircle', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'repayLoan', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setAiAgent', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setPayoutOrder', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalCircles', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalPayments', data: BytesLike): Result;
  }

  
    export namespace CashDepositedEvent {
      export type InputTuple = [circleId: BigNumberish, receiver: AddressLike, amount: BigNumberish];
      export type OutputTuple = [circleId: bigint, receiver: string, amount: bigint];
      export interface OutputObject {circleId: bigint, receiver: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CircleDeletedEvent {
      export type InputTuple = [_circleId: BigNumberish];
      export type OutputTuple = [_circleId: bigint];
      export interface OutputObject {_circleId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CircleRegisteredEvent {
      export type InputTuple = [id: BigNumberish, amount: BigNumberish, duration: BigNumberish, maxMembers: BigNumberish, startDate: BigNumberish, interestPercent: BigNumberish, leftPercent: BigNumberish, admin: AddressLike];
      export type OutputTuple = [id: bigint, amount: bigint, duration: bigint, maxMembers: bigint, startDate: bigint, interestPercent: bigint, leftPercent: bigint, admin: string];
      export interface OutputObject {id: bigint, amount: bigint, duration: bigint, maxMembers: bigint, startDate: bigint, interestPercent: bigint, leftPercent: bigint, admin: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace FundsDisbursedEvent {
      export type InputTuple = [circleId: BigNumberish, recipient: AddressLike, amount: BigNumberish];
      export type OutputTuple = [circleId: bigint, recipient: string, amount: bigint];
      export interface OutputObject {circleId: bigint, recipient: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace LoanPaidEvent {
      export type InputTuple = [circleId: BigNumberish, member: AddressLike, amount: BigNumberish];
      export type OutputTuple = [circleId: bigint, member: string, amount: bigint];
      export interface OutputObject {circleId: bigint, member: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace LoanProcessedEvent {
      export type InputTuple = [circleId: BigNumberish, member: AddressLike, amount: BigNumberish];
      export type OutputTuple = [circleId: bigint, member: string, amount: bigint];
      export interface OutputObject {circleId: bigint, member: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace MemberAddedEvent {
      export type InputTuple = [_circleId: BigNumberish, _address: AddressLike];
      export type OutputTuple = [_circleId: bigint, _address: string];
      export interface OutputObject {_circleId: bigint, _address: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace MemberAddedToPayoutOrderEvent {
      export type InputTuple = [_circleId: BigNumberish, _member: AddressLike[]];
      export type OutputTuple = [_circleId: bigint, _member: string[]];
      export interface OutputObject {_circleId: bigint, _member: string[] };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace MemberRemovedEvent {
      export type InputTuple = [_circleId: BigNumberish, _member: AddressLike];
      export type OutputTuple = [_circleId: bigint, _member: string];
      export interface OutputObject {_circleId: bigint, _member: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PayDateCheckedEvent {
      export type InputTuple = [_circleId: BigNumberish, _isPastPayDate: boolean, _isAllMembersContributed: boolean, isDisbursed: boolean];
      export type OutputTuple = [_circleId: bigint, _isPastPayDate: boolean, _isAllMembersContributed: boolean, isDisbursed: boolean];
      export interface OutputObject {_circleId: bigint, _isPastPayDate: boolean, _isAllMembersContributed: boolean, isDisbursed: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PayOutProcessedEvent {
      export type InputTuple = [_receiver: AddressLike, _amount: BigNumberish];
      export type OutputTuple = [_receiver: string, _amount: bigint];
      export interface OutputObject {_receiver: string, _amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PayoutDoneEvent {
      export type InputTuple = [_circleId: BigNumberish, _receiver: AddressLike, _amount: BigNumberish];
      export type OutputTuple = [_circleId: bigint, _receiver: string, _amount: bigint];
      export interface OutputObject {_circleId: bigint, _receiver: string, _amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PayoutOrderSetEvent {
      export type InputTuple = [_circleId: BigNumberish, _payoutOrder: AddressLike[]];
      export type OutputTuple = [_circleId: bigint, _payoutOrder: string[]];
      export interface OutputObject {_circleId: bigint, _payoutOrder: string[] };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RefundIssuedEvent {
      export type InputTuple = [circleId: BigNumberish, member: AddressLike, amount: BigNumberish];
      export type OutputTuple = [circleId: bigint, member: string, amount: bigint];
      export interface OutputObject {circleId: bigint, member: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RefundUpdatedEvent {
      export type InputTuple = [_circleId: BigNumberish];
      export type OutputTuple = [_circleId: bigint];
      export interface OutputObject {_circleId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TransferDoneEvent {
      export type InputTuple = [_receiver: AddressLike, _amount: BigNumberish, _success: boolean, _contractBal: BigNumberish, _receiverBalBefore: BigNumberish];
      export type OutputTuple = [_receiver: string, _amount: bigint, _success: boolean, _contractBal: bigint, _receiverBalBefore: bigint];
      export interface OutputObject {_receiver: string, _amount: bigint, _success: boolean, _contractBal: bigint, _receiverBalBefore: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace WithdrawalRecordedEvent {
      export type InputTuple = [_circleId: BigNumberish, _receiver: AddressLike, _amount: BigNumberish];
      export type OutputTuple = [_circleId: bigint, _receiver: string, _amount: bigint];
      export interface OutputObject {_circleId: bigint, _receiver: string, _amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace aiAgentSetEvent {
      export type InputTuple = [_aiAgent: AddressLike];
      export type OutputTuple = [_aiAgent: string];
      export interface OutputObject {_aiAgent: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace amountWithdrawnEvent {
      export type InputTuple = [_address: AddressLike, amount: BigNumberish];
      export type OutputTuple = [_address: string, amount: bigint];
      export interface OutputObject {_address: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface CirclePool extends BaseContract {
    
    connect(runner?: ContractRunner | null): CirclePool;
    waitForDeployment(): Promise<this>;

    interface: CirclePoolInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    addMember: TypedContractMethod<
      [_address: AddressLike, _circleId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    addMemberToPayoutOrder: TypedContractMethod<
      [_circleId: BigNumberish, _member: AddressLike[], ],
      [void],
      'nonpayable'
    >
    

    
    aiAgent: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    checkAllMembersContributed: TypedContractMethod<
      [_circleId: BigNumberish, ],
      [boolean],
      'view'
    >
    

    
    checkPayDate: TypedContractMethod<
      [circleIds: BigNumberish[], ],
      [void],
      'nonpayable'
    >
    

    
    circles: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, string, bigint] & {circleId: bigint, amount: bigint, startDate: bigint, payDate: bigint, duration: bigint, maxMembers: bigint, cycle: bigint, round: bigint, interestPercent: bigint, leftPercent: bigint, admin: string, loanableAmount: bigint }],
      'view'
    >
    

    
    deleteCircle: TypedContractMethod<
      [_circleId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    deleteMember: TypedContractMethod<
      [_circleId: BigNumberish, _member: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    depositCash: TypedContractMethod<
      [_circleId: BigNumberish, ],
      [void],
      'payable'
    >
    

    
    emergencyWithdraw: TypedContractMethod<
      [_address: AddressLike, _amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    getBalance: TypedContractMethod<
      [_circleId: BigNumberish, _member: AddressLike, ],
      [bigint[]],
      'view'
    >
    

    
    getCircle: TypedContractMethod<
      [_circleId: BigNumberish, ],
      [[bigint, bigint, bigint, bigint, bigint, bigint, string, string[], bigint, bigint, bigint]],
      'view'
    >
    

    
    getCirclePayoutOrder: TypedContractMethod<
      [_circleId: BigNumberish, ],
      [string[]],
      'view'
    >
    

    
    getCircles: TypedContractMethod<
      [],
      [[bigint[], bigint[], bigint[], bigint[], bigint[], string[]]],
      'view'
    >
    

    
    getEachMemberBalance: TypedContractMethod<
      [_circleId: BigNumberish, ],
      [[string[], bigint[][]]],
      'view'
    >
    

    
    getPayments: TypedContractMethod<
      [],
      [CirclePool.PaymentStructOutput[]],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    payments: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, bigint, string, bigint, bigint] & {id: bigint, circleId: bigint, receiver: string, amount: bigint, timestamp: bigint }],
      'view'
    >
    

    
    processLoan: TypedContractMethod<
      [_member: AddressLike, _circleId: BigNumberish, _amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    registerCircle: TypedContractMethod<
      [_amount: BigNumberish, _duration: BigNumberish, _startDate: BigNumberish, _maxMembers: BigNumberish, _percentageInterest: BigNumberish, _percentageLeft: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    repayLoan: TypedContractMethod<
      [_member: AddressLike, _circleId: BigNumberish, ],
      [void],
      'payable'
    >
    

    
    setAiAgent: TypedContractMethod<
      [_aiAgent: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    setPayoutOrder: TypedContractMethod<
      [_circleId: BigNumberish, _payoutOrder: AddressLike[], ],
      [void],
      'nonpayable'
    >
    

    
    totalCircles: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    totalPayments: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'addMember'): TypedContractMethod<
      [_address: AddressLike, _circleId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'addMemberToPayoutOrder'): TypedContractMethod<
      [_circleId: BigNumberish, _member: AddressLike[], ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'aiAgent'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'checkAllMembersContributed'): TypedContractMethod<
      [_circleId: BigNumberish, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'checkPayDate'): TypedContractMethod<
      [circleIds: BigNumberish[], ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'circles'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, string, bigint] & {circleId: bigint, amount: bigint, startDate: bigint, payDate: bigint, duration: bigint, maxMembers: bigint, cycle: bigint, round: bigint, interestPercent: bigint, leftPercent: bigint, admin: string, loanableAmount: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'deleteCircle'): TypedContractMethod<
      [_circleId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'deleteMember'): TypedContractMethod<
      [_circleId: BigNumberish, _member: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'depositCash'): TypedContractMethod<
      [_circleId: BigNumberish, ],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'emergencyWithdraw'): TypedContractMethod<
      [_address: AddressLike, _amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getBalance'): TypedContractMethod<
      [_circleId: BigNumberish, _member: AddressLike, ],
      [bigint[]],
      'view'
    >;
getFunction(nameOrSignature: 'getCircle'): TypedContractMethod<
      [_circleId: BigNumberish, ],
      [[bigint, bigint, bigint, bigint, bigint, bigint, string, string[], bigint, bigint, bigint]],
      'view'
    >;
getFunction(nameOrSignature: 'getCirclePayoutOrder'): TypedContractMethod<
      [_circleId: BigNumberish, ],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'getCircles'): TypedContractMethod<
      [],
      [[bigint[], bigint[], bigint[], bigint[], bigint[], string[]]],
      'view'
    >;
getFunction(nameOrSignature: 'getEachMemberBalance'): TypedContractMethod<
      [_circleId: BigNumberish, ],
      [[string[], bigint[][]]],
      'view'
    >;
getFunction(nameOrSignature: 'getPayments'): TypedContractMethod<
      [],
      [CirclePool.PaymentStructOutput[]],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'payments'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, bigint, string, bigint, bigint] & {id: bigint, circleId: bigint, receiver: string, amount: bigint, timestamp: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'processLoan'): TypedContractMethod<
      [_member: AddressLike, _circleId: BigNumberish, _amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'registerCircle'): TypedContractMethod<
      [_amount: BigNumberish, _duration: BigNumberish, _startDate: BigNumberish, _maxMembers: BigNumberish, _percentageInterest: BigNumberish, _percentageLeft: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'repayLoan'): TypedContractMethod<
      [_member: AddressLike, _circleId: BigNumberish, ],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'setAiAgent'): TypedContractMethod<
      [_aiAgent: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setPayoutOrder'): TypedContractMethod<
      [_circleId: BigNumberish, _payoutOrder: AddressLike[], ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'totalCircles'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'totalPayments'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;

    getEvent(key: 'CashDeposited'): TypedContractEvent<CashDepositedEvent.InputTuple, CashDepositedEvent.OutputTuple, CashDepositedEvent.OutputObject>;
getEvent(key: 'CircleDeleted'): TypedContractEvent<CircleDeletedEvent.InputTuple, CircleDeletedEvent.OutputTuple, CircleDeletedEvent.OutputObject>;
getEvent(key: 'CircleRegistered'): TypedContractEvent<CircleRegisteredEvent.InputTuple, CircleRegisteredEvent.OutputTuple, CircleRegisteredEvent.OutputObject>;
getEvent(key: 'FundsDisbursed'): TypedContractEvent<FundsDisbursedEvent.InputTuple, FundsDisbursedEvent.OutputTuple, FundsDisbursedEvent.OutputObject>;
getEvent(key: 'LoanPaid'): TypedContractEvent<LoanPaidEvent.InputTuple, LoanPaidEvent.OutputTuple, LoanPaidEvent.OutputObject>;
getEvent(key: 'LoanProcessed'): TypedContractEvent<LoanProcessedEvent.InputTuple, LoanProcessedEvent.OutputTuple, LoanProcessedEvent.OutputObject>;
getEvent(key: 'MemberAdded'): TypedContractEvent<MemberAddedEvent.InputTuple, MemberAddedEvent.OutputTuple, MemberAddedEvent.OutputObject>;
getEvent(key: 'MemberAddedToPayoutOrder'): TypedContractEvent<MemberAddedToPayoutOrderEvent.InputTuple, MemberAddedToPayoutOrderEvent.OutputTuple, MemberAddedToPayoutOrderEvent.OutputObject>;
getEvent(key: 'MemberRemoved'): TypedContractEvent<MemberRemovedEvent.InputTuple, MemberRemovedEvent.OutputTuple, MemberRemovedEvent.OutputObject>;
getEvent(key: 'PayDateChecked'): TypedContractEvent<PayDateCheckedEvent.InputTuple, PayDateCheckedEvent.OutputTuple, PayDateCheckedEvent.OutputObject>;
getEvent(key: 'PayOutProcessed'): TypedContractEvent<PayOutProcessedEvent.InputTuple, PayOutProcessedEvent.OutputTuple, PayOutProcessedEvent.OutputObject>;
getEvent(key: 'PayoutDone'): TypedContractEvent<PayoutDoneEvent.InputTuple, PayoutDoneEvent.OutputTuple, PayoutDoneEvent.OutputObject>;
getEvent(key: 'PayoutOrderSet'): TypedContractEvent<PayoutOrderSetEvent.InputTuple, PayoutOrderSetEvent.OutputTuple, PayoutOrderSetEvent.OutputObject>;
getEvent(key: 'RefundIssued'): TypedContractEvent<RefundIssuedEvent.InputTuple, RefundIssuedEvent.OutputTuple, RefundIssuedEvent.OutputObject>;
getEvent(key: 'RefundUpdated'): TypedContractEvent<RefundUpdatedEvent.InputTuple, RefundUpdatedEvent.OutputTuple, RefundUpdatedEvent.OutputObject>;
getEvent(key: 'TransferDone'): TypedContractEvent<TransferDoneEvent.InputTuple, TransferDoneEvent.OutputTuple, TransferDoneEvent.OutputObject>;
getEvent(key: 'WithdrawalRecorded'): TypedContractEvent<WithdrawalRecordedEvent.InputTuple, WithdrawalRecordedEvent.OutputTuple, WithdrawalRecordedEvent.OutputObject>;
getEvent(key: 'aiAgentSet'): TypedContractEvent<aiAgentSetEvent.InputTuple, aiAgentSetEvent.OutputTuple, aiAgentSetEvent.OutputObject>;
getEvent(key: 'amountWithdrawn'): TypedContractEvent<amountWithdrawnEvent.InputTuple, amountWithdrawnEvent.OutputTuple, amountWithdrawnEvent.OutputObject>;

    filters: {
      
      'CashDeposited(uint256,address,uint256)': TypedContractEvent<CashDepositedEvent.InputTuple, CashDepositedEvent.OutputTuple, CashDepositedEvent.OutputObject>;
      CashDeposited: TypedContractEvent<CashDepositedEvent.InputTuple, CashDepositedEvent.OutputTuple, CashDepositedEvent.OutputObject>;
    

      'CircleDeleted(uint256)': TypedContractEvent<CircleDeletedEvent.InputTuple, CircleDeletedEvent.OutputTuple, CircleDeletedEvent.OutputObject>;
      CircleDeleted: TypedContractEvent<CircleDeletedEvent.InputTuple, CircleDeletedEvent.OutputTuple, CircleDeletedEvent.OutputObject>;
    

      'CircleRegistered(uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)': TypedContractEvent<CircleRegisteredEvent.InputTuple, CircleRegisteredEvent.OutputTuple, CircleRegisteredEvent.OutputObject>;
      CircleRegistered: TypedContractEvent<CircleRegisteredEvent.InputTuple, CircleRegisteredEvent.OutputTuple, CircleRegisteredEvent.OutputObject>;
    

      'FundsDisbursed(uint256,address,uint256)': TypedContractEvent<FundsDisbursedEvent.InputTuple, FundsDisbursedEvent.OutputTuple, FundsDisbursedEvent.OutputObject>;
      FundsDisbursed: TypedContractEvent<FundsDisbursedEvent.InputTuple, FundsDisbursedEvent.OutputTuple, FundsDisbursedEvent.OutputObject>;
    

      'LoanPaid(uint256,address,uint256)': TypedContractEvent<LoanPaidEvent.InputTuple, LoanPaidEvent.OutputTuple, LoanPaidEvent.OutputObject>;
      LoanPaid: TypedContractEvent<LoanPaidEvent.InputTuple, LoanPaidEvent.OutputTuple, LoanPaidEvent.OutputObject>;
    

      'LoanProcessed(uint256,address,uint256)': TypedContractEvent<LoanProcessedEvent.InputTuple, LoanProcessedEvent.OutputTuple, LoanProcessedEvent.OutputObject>;
      LoanProcessed: TypedContractEvent<LoanProcessedEvent.InputTuple, LoanProcessedEvent.OutputTuple, LoanProcessedEvent.OutputObject>;
    

      'MemberAdded(uint256,address)': TypedContractEvent<MemberAddedEvent.InputTuple, MemberAddedEvent.OutputTuple, MemberAddedEvent.OutputObject>;
      MemberAdded: TypedContractEvent<MemberAddedEvent.InputTuple, MemberAddedEvent.OutputTuple, MemberAddedEvent.OutputObject>;
    

      'MemberAddedToPayoutOrder(uint256,address[])': TypedContractEvent<MemberAddedToPayoutOrderEvent.InputTuple, MemberAddedToPayoutOrderEvent.OutputTuple, MemberAddedToPayoutOrderEvent.OutputObject>;
      MemberAddedToPayoutOrder: TypedContractEvent<MemberAddedToPayoutOrderEvent.InputTuple, MemberAddedToPayoutOrderEvent.OutputTuple, MemberAddedToPayoutOrderEvent.OutputObject>;
    

      'MemberRemoved(uint256,address)': TypedContractEvent<MemberRemovedEvent.InputTuple, MemberRemovedEvent.OutputTuple, MemberRemovedEvent.OutputObject>;
      MemberRemoved: TypedContractEvent<MemberRemovedEvent.InputTuple, MemberRemovedEvent.OutputTuple, MemberRemovedEvent.OutputObject>;
    

      'PayDateChecked(uint256,bool,bool,bool)': TypedContractEvent<PayDateCheckedEvent.InputTuple, PayDateCheckedEvent.OutputTuple, PayDateCheckedEvent.OutputObject>;
      PayDateChecked: TypedContractEvent<PayDateCheckedEvent.InputTuple, PayDateCheckedEvent.OutputTuple, PayDateCheckedEvent.OutputObject>;
    

      'PayOutProcessed(address,uint256)': TypedContractEvent<PayOutProcessedEvent.InputTuple, PayOutProcessedEvent.OutputTuple, PayOutProcessedEvent.OutputObject>;
      PayOutProcessed: TypedContractEvent<PayOutProcessedEvent.InputTuple, PayOutProcessedEvent.OutputTuple, PayOutProcessedEvent.OutputObject>;
    

      'PayoutDone(uint256,address,uint256)': TypedContractEvent<PayoutDoneEvent.InputTuple, PayoutDoneEvent.OutputTuple, PayoutDoneEvent.OutputObject>;
      PayoutDone: TypedContractEvent<PayoutDoneEvent.InputTuple, PayoutDoneEvent.OutputTuple, PayoutDoneEvent.OutputObject>;
    

      'PayoutOrderSet(uint256,address[])': TypedContractEvent<PayoutOrderSetEvent.InputTuple, PayoutOrderSetEvent.OutputTuple, PayoutOrderSetEvent.OutputObject>;
      PayoutOrderSet: TypedContractEvent<PayoutOrderSetEvent.InputTuple, PayoutOrderSetEvent.OutputTuple, PayoutOrderSetEvent.OutputObject>;
    

      'RefundIssued(uint256,address,uint256)': TypedContractEvent<RefundIssuedEvent.InputTuple, RefundIssuedEvent.OutputTuple, RefundIssuedEvent.OutputObject>;
      RefundIssued: TypedContractEvent<RefundIssuedEvent.InputTuple, RefundIssuedEvent.OutputTuple, RefundIssuedEvent.OutputObject>;
    

      'RefundUpdated(uint256)': TypedContractEvent<RefundUpdatedEvent.InputTuple, RefundUpdatedEvent.OutputTuple, RefundUpdatedEvent.OutputObject>;
      RefundUpdated: TypedContractEvent<RefundUpdatedEvent.InputTuple, RefundUpdatedEvent.OutputTuple, RefundUpdatedEvent.OutputObject>;
    

      'TransferDone(address,uint256,bool,uint256,uint256)': TypedContractEvent<TransferDoneEvent.InputTuple, TransferDoneEvent.OutputTuple, TransferDoneEvent.OutputObject>;
      TransferDone: TypedContractEvent<TransferDoneEvent.InputTuple, TransferDoneEvent.OutputTuple, TransferDoneEvent.OutputObject>;
    

      'WithdrawalRecorded(uint256,address,uint256)': TypedContractEvent<WithdrawalRecordedEvent.InputTuple, WithdrawalRecordedEvent.OutputTuple, WithdrawalRecordedEvent.OutputObject>;
      WithdrawalRecorded: TypedContractEvent<WithdrawalRecordedEvent.InputTuple, WithdrawalRecordedEvent.OutputTuple, WithdrawalRecordedEvent.OutputObject>;
    

      'aiAgentSet(address)': TypedContractEvent<aiAgentSetEvent.InputTuple, aiAgentSetEvent.OutputTuple, aiAgentSetEvent.OutputObject>;
      aiAgentSet: TypedContractEvent<aiAgentSetEvent.InputTuple, aiAgentSetEvent.OutputTuple, aiAgentSetEvent.OutputObject>;
    

      'amountWithdrawn(address,uint256)': TypedContractEvent<amountWithdrawnEvent.InputTuple, amountWithdrawnEvent.OutputTuple, amountWithdrawnEvent.OutputObject>;
      amountWithdrawn: TypedContractEvent<amountWithdrawnEvent.InputTuple, amountWithdrawnEvent.OutputTuple, amountWithdrawnEvent.OutputObject>;
    
    };
  }